<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UVBuild\MQX_TaskTimer_frdmkl46.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UVBuild\MQX_TaskTimer_frdmkl46.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Aug 12 21:47:52 2015
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Timer_task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19]">__boot</a>
 <LI><a href="#[a1]">_sched_start_internal</a>
 <LI><a href="#[ad]">_sched_run_internal</a>
 <LI><a href="#[7e]">_sched_check_scheduler_internal</a>
 <LI><a href="#[82]">_sched_execute_scheduler_internal</a>
 <LI><a href="#[e6]">_mqx_api_call</a>
 <LI><a href="#[135]">_task_block</a>
 <LI><a href="#[c]">_int_kernel_isr</a>
 <LI><a href="#[5b]">_psp_exception_return</a>
 <LI><a href="#[136]">_mem_test_and_set</a>
 <LI><a href="#[b0]">__get_PSP</a>
 <LI><a href="#[137]">__get_MSP</a>
 <LI><a href="#[59]">__set_MSP</a>
 <LI><a href="#[138]">__get_PSR</a>
 <LI><a href="#[139]">__enable_interrupt</a>
 <LI><a href="#[13a]">__disable_interrupt</a>
 <LI><a href="#[13b]">__get_LR</a>
 <LI><a href="#[13c]">__get_PC</a>
 <LI><a href="#[13d]">__get_CONTROL</a>
 <LI><a href="#[14]">_int_kernel_isr_epilog</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d5]">SegLCD_DisplayError</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d6]">SegLCD_Set</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">Cpu_INT_NMIInterrupt</a> from cpu.o(.text) referenced from vectors.o(.vectortable)
 <LI><a href="#[18]">Cpu_Interrupt</a> from cpu.o(.text) referenced 12 times from vectors.o(.vectortable)
 <LI><a href="#[7]">GPIO1_Interrupt</a> from gpio1.o(.text) referenced from gpio1.o(.text)
 <LI><a href="#[f]">Show_LCD</a> from mqx_tasks.o(.text) referenced from mqx_tasks.o(.text)
 <LI><a href="#[8]">SystemTimer1_GetCounterValue</a> from systemtimer1.o(.text) referenced from mqx1.o(.text)
 <LI><a href="#[9]">SystemTimer1_Interrupt</a> from systemtimer1.o(.text) referenced from systemtimer1.o(.text)
 <LI><a href="#[15]">Timer_task</a> from mqx_tasks.o(.text) referenced from task_template_list.o(.constdata)
 <LI><a href="#[19]">__boot</a> from boot.o(. text) referenced from vectors.o(.vectortable)
 <LI><a href="#[5]">__init_hardware</a> from cpu.o(.text) referenced from startup_arm_cc.o(.emb_text)
 <LI><a href="#[1a]">__main</a> from __main.o(!!!main) referenced from startup_arm_cc.o(.emb_text)
 <LI><a href="#[d]">_int_default_isr</a> from int.o(.text) referenced from int.o(.text)
 <LI><a href="#[a]">_int_exception_isr</a> from int_xcpt.o(.text) referenced from int.o(.text)
 <LI><a href="#[c]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced from int.o(.text)
 <LI><a href="#[c]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced 33 times from vectors.o(.vectortable)
 <LI><a href="#[14]">_int_kernel_isr_epilog</a> from dispatch.o(KERNEL) referenced from dispatch.o(KERNEL)
 <LI><a href="#[b]">_int_unexpected_isr</a> from int_unx.o(.text) referenced from int.o(.text)
 <LI><a href="#[e]">_lwtimer_isr_internal</a> from lwtimer.o(.text) referenced from lwtimer.o(.text)
 <LI><a href="#[10]">_mqx_idle_task</a> from idletask.o(.text) referenced from mqx_utils.o(.text)
 <LI><a href="#[13]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[11]">_task_exit_function_internal</a> from task.o(.text) referenced 2 times from stack_bu.o(.text)
 <LI><a href="#[12]">fputc</a> from csio1.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[19]"></a>__boot</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, boot.o(. text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__thumb_startup
</UL>

<P><STRONG><a name="[e1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[20]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[21]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[24]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[29]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[106]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[23]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[25]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; _mqxlite &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[108]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e5]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[28]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[109]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[45]"></a>__get_heap_base</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqx1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqx_initialize_heap
</UL>

<P><STRONG><a name="[46]"></a>__get_heap_limit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqx1.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqx_initialize_heap
</UL>

<P><STRONG><a name="[1f]"></a>__thumb_startup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arm_cc.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__boot
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[17]"></a>Cpu_INT_NMIInterrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cpu_INT_NMIInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_OnNMIINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[18]"></a>Cpu_Interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[5]"></a>__init_hardware</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_cc.o(.emb_text)
</UL>
<P><STRONG><a name="[2d]"></a>PE_low_level_init</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PE_low_level_init &rArr; _mqxlite_init &rArr; system_timer_init &rArr; SystemTimer1_Init &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO1_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>fputc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, csio1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>fgetc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, csio1.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csio1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[10c]"></a>_ttywrch</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, csio1.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>Cpu_OnNMIINT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_INT_NMIInterrupt
</UL>

<P><STRONG><a name="[31]"></a>GPIO1_OnPortEvent</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GPIO1_OnPortEvent &rArr; _lwsem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Interrupt
</UL>

<P><STRONG><a name="[7]"></a>GPIO1_Interrupt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gpio1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = GPIO1_Interrupt &rArr; GPIO1_OnPortEvent &rArr; _lwsem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_OnPortEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio1.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>GPIO1_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gpio1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO1_Init &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[10d]"></a>GPIO1_SetFieldValue</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gpio1.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>GPIO1_GetFieldValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio1.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>GPIO1_ClearFieldBits</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio1.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>GPIO1_SetFieldBits</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio1.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>GPIO1_ToggleFieldBits</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio1.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>IO1_Init</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, io1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[35]"></a>IO1_Main</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, io1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptTx
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptRx
</UL>

<P><STRONG><a name="[38]"></a>SystemTimer1_OnCounterRestart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mqx1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemTimer1_OnCounterRestart &rArr; _time_notify_kernel &rArr; _psp_normalize_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Interrupt
</UL>

<P><STRONG><a name="[3a]"></a>SystemTimer1_GetTicsPerSecond</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mqx1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemTimer1_GetTicsPerSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetPeriodTicks
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetInputFrequency
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_init
</UL>

<P><STRONG><a name="[3e]"></a>system_timer_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mqx1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_timer_init &rArr; SystemTimer1_Init &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_hwticks_per_tick
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_hwtick_function
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetPeriodTicks
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[42]"></a>system_timer_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mqx1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
</UL>

<P><STRONG><a name="[44]"></a>mqx_initialize_heap</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqx1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mqx_initialize_heap &rArr; _lwmem_create_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_default_pool
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_heap_limit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_heap_base
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[49]"></a>PEX_RTOS_InstallInterrupt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mqx1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_kernel_isr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>

<P><STRONG><a name="[9]"></a>SystemTimer1_Interrupt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, systemtimer1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemTimer1_Interrupt &rArr; SystemTimer1_OnCounterRestart &rArr; _time_notify_kernel &rArr; _psp_normalize_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_OnCounterRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systemtimer1.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>SystemTimer1_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, systemtimer1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemTimer1_Init &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_init
</UL>

<P><STRONG><a name="[4b]"></a>SystemTimer1_Deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, systemtimer1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>

<P><STRONG><a name="[43]"></a>SystemTimer1_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systemtimer1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_start
</UL>

<P><STRONG><a name="[112]"></a>SystemTimer1_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systemtimer1.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>SystemTimer1_GetInputFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemtimer1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
</UL>

<P><STRONG><a name="[3b]"></a>SystemTimer1_GetPeriodTicks</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systemtimer1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
</UL>

<P><STRONG><a name="[4c]"></a>SystemTimer1_ResetCounter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systemtimer1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[8]"></a>SystemTimer1_GetCounterValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systemtimer1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mqx1.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>_mqx_idle_task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, idletask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mqx_idle_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqx_utils.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_int_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_test
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_cancel_period
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_cancel_timer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_add_timer_to_queue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_create_periodic_queue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_until
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_for
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_test
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_free_internal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_ResetCounter
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue_td
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[4d]"></a>_int_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_test
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_cancel_period
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_cancel_timer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_add_timer_to_queue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_create_periodic_queue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_test
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_test
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_free_internal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_ResetCounter
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue_td
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[d]"></a>_int_default_isr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_default_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> int.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>_int_get_default_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, int.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_int_get_exception_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_get_exception_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[52]"></a>_int_get_isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[33]"></a>_int_get_isr_data</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_get_isr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Init
</UL>

<P><STRONG><a name="[114]"></a>_int_get_isr_depth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, int.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_int_install_default_isr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_unexpected_isr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_exception_isr
</UL>

<P><STRONG><a name="[53]"></a>_int_install_exception_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_default_isr
</UL>

<P><STRONG><a name="[34]"></a>_int_install_isr</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Deinit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEX_RTOS_InstallInterrupt
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Init
</UL>

<P><STRONG><a name="[55]"></a>_int_install_unexpected_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_default_isr
</UL>

<P><STRONG><a name="[56]"></a>_int_set_exception_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[57]"></a>_int_set_isr_data</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[a2]"></a>_int_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[58]"></a>_psp_int_install</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, int_inst.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _psp_int_install
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[4a]"></a>_int_install_kernel_isr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, int_kisr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEX_RTOS_InstallInterrupt
</UL>

<P><STRONG><a name="[b]"></a>_int_unexpected_isr</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, int_unx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _int_unexpected_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> int.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>_int_set_vector_table</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, int_vtab.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[115]"></a>_int_get_vector_table</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, int_vtab.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_int_exception_isr</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, int_xcpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _int_exception_isr &rArr; _task_abort &rArr; _task_abort_internal &rArr; _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_fatal_error
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_exception_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_exception_return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> int.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>_lwmem_alloc_internal</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero_from
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_from
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero_from
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_from
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
</UL>

<P><STRONG><a name="[5f]"></a>_lwmem_alloc_at_internal</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at
</UL>

<P><STRONG><a name="[60]"></a>_lwmem_alloc_align_internal</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_align_from
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_align
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_from
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align
</UL>

<P><STRONG><a name="[61]"></a>_lwmem_alloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[62]"></a>_lwmem_alloc_at</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
</UL>

<P><STRONG><a name="[63]"></a>_lwmem_alloc_align</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
</UL>

<P><STRONG><a name="[116]"></a>_lwmem_get_system_pool_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwmem.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_lwmem_alloc_from</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[65]"></a>_lwmem_alloc_align_from</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
</UL>

<P><STRONG><a name="[66]"></a>_lwmem_alloc_zero</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[67]"></a>_lwmem_alloc_zero_from</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[48]"></a>_lwmem_create_pool</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lwmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lwmem_create_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_init_internal
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqx_initialize_heap
</UL>

<P><STRONG><a name="[68]"></a>_lwmem_create_pool_mapped</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
</UL>

<P><STRONG><a name="[69]"></a>_lwmem_free</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[6a]"></a>_lwmem_get_free_internal</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_free_from
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_free
</UL>

<P><STRONG><a name="[6b]"></a>_lwmem_get_free</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_free_internal
</UL>

<P><STRONG><a name="[6c]"></a>_lwmem_get_free_from</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_free_internal
</UL>

<P><STRONG><a name="[6d]"></a>_lwmem_alloc_system_from</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[6e]"></a>_lwmem_alloc_system</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[6f]"></a>_lwmem_alloc_system_align</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
</UL>

<P><STRONG><a name="[70]"></a>_lwmem_alloc_system_align_from</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
</UL>

<P><STRONG><a name="[71]"></a>_lwmem_init_internal</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
</UL>

<P><STRONG><a name="[72]"></a>_lwmem_get_next_block_internal</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[47]"></a>_lwmem_set_default_pool</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwmem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqx_initialize_heap
</UL>

<P><STRONG><a name="[73]"></a>_lwmem_get_size</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[117]"></a>_lwmem_get_highwater</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwmem.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_lwmem_test</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[76]"></a>_lwmem_transfer</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[118]"></a>_lwmem_transfer_internal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwmem.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>_lwmem_transfer_td_internal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwmem.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_lwmem_alloc_system_zero_from</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[79]"></a>_lwmem_alloc_system_zero</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>

<P><STRONG><a name="[7a]"></a>_lwsem_create_internal</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lwsem_create_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_hidden
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
</UL>

<P><STRONG><a name="[7b]"></a>_lwsem_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lwsem_create &rArr; _lwsem_create_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDs_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[7c]"></a>_lwsem_create_hidden</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
</UL>

<P><STRONG><a name="[7d]"></a>_lwsem_destroy_internal</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>

<P><STRONG><a name="[7f]"></a>_lwsem_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
</UL>

<P><STRONG><a name="[11a]"></a>_lwsem_poll</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lwsem.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_lwsem_post</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _lwsem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_OnPortEvent
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_index
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[80]"></a>_lwsem_test</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[81]"></a>_lwsem_wait</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _lwsem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_index
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[83]"></a>_lwsem_wait_timed_internal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_until
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_for
</UL>

<P><STRONG><a name="[85]"></a>_lwsem_wait_for</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>

<P><STRONG><a name="[87]"></a>_lwsem_wait_ticks</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>

<P><STRONG><a name="[88]"></a>_lwsem_wait_until</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>

<P><STRONG><a name="[e]"></a>_lwtimer_isr_internal</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lwtimer_isr_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwtimer.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>_lwtimer_create_periodic_queue</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lwtimer_create_periodic_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_task
</UL>

<P><STRONG><a name="[8a]"></a>_lwtimer_add_timer_to_queue</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lwtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lwtimer_add_timer_to_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_task
</UL>

<P><STRONG><a name="[8b]"></a>_lwtimer_cancel_timer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lwtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[8c]"></a>_lwtimer_cancel_period</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[8d]"></a>_lwtimer_test</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lwtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = main &rArr; _mqxlite &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5e]"></a>_mem_zero</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, mem_zero.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
</UL>

<P><STRONG><a name="[90]"></a>LEDs_Init</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, mqx_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LEDs_Init &rArr; _lwsem_create &rArr; _lwsem_create_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_LCD
</UL>

<P><STRONG><a name="[94]"></a>LED_Toggle</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mqx_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_LCD
</UL>

<P><STRONG><a name="[f]"></a>Show_LCD</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mqx_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Show_LCD &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayDecimal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDs_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqx_tasks.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>Timer_task</STRONG> (Thumb, 84 bytes, Stack size 112 bytes, mqx_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Timer_task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_add_timer_to_queue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_create_periodic_queue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_template_list.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>_mqx_get_kernel_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_mqx_fatal_error</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mqx_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mqx_fatal_error
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[11c]"></a>_mqx_get_cpu_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_mqx_set_cpu_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[11d]"></a>_mqx_get_initialization</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>_mqx_get_exit_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>_mqx_set_exit_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>_mqx_get_system_task_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_mqx_init_kernel_data_internal</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mqx_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mqx_init_kernel_data_internal &rArr; _psp_set_kernel_disable_level
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_set_kernel_disable_level
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[2e]"></a>_mqxlite_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mqxlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _mqxlite_init &rArr; system_timer_init &rArr; SystemTimer1_Init &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_cpu_type
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_vector_table
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqx_initialize_heap
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[96]"></a>_mqx_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqxlite.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_fatal_error
</UL>

<P><STRONG><a name="[8e]"></a>_mqxlite</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mqxlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = _mqxlite &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_start_internal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>_psp_int_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, psp_iinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _psp_int_init &rArr; _int_init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[86]"></a>_psp_add_ticks</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, psp_tiad.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_for
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
</UL>

<P><STRONG><a name="[a3]"></a>_psp_normalize_ticks</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, psp_tinm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _psp_normalize_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks_fast
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
</UL>

<P><STRONG><a name="[cc]"></a>_psp_subtract_ticks</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, psp_tisu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_ticks
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks
</UL>

<P><STRONG><a name="[ce]"></a>_psp_subtract_ticks_int32</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, psp_tisu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks_int32
</UL>

<P><STRONG><a name="[75]"></a>_queue_test</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, qu_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwtimer_test
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_test
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_test
</UL>

<P><STRONG><a name="[98]"></a>_psp_set_kernel_disable_level</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sc_irdyq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _psp_set_kernel_disable_level
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
</UL>

<P><STRONG><a name="[9b]"></a>_psp_init_readyqs</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, sc_irdyq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _psp_init_readyqs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[121]"></a>_sched_get_max_priority</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sched.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>_sched_get_min_priority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sched.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_sched_yield</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>

<P><STRONG><a name="[a5]"></a>_sched_set_priority_internal</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_sync_priority_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_unboost_priority_internal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_boost_priority_internal
</UL>

<P><STRONG><a name="[a7]"></a>_sched_boost_priority_internal</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
</UL>

<P><STRONG><a name="[a8]"></a>_sched_unboost_priority_internal</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
</UL>

<P><STRONG><a name="[c4]"></a>_sched_insert_priorityq_internal</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, sched.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
</UL>

<P><STRONG><a name="[123]"></a>_sched_get_max_priority_on_q_internal</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sched.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>_psp_build_stack_frame</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stack_bu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _psp_build_stack_frame &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[ac]"></a>_psp_destroy_stack_frame</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stack_de.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[bc]"></a>_psp_get_stack_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stack_st.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_internal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_internal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[a0]"></a>_task_ready_internal</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[51]"></a>_task_set_error</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_size
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_free_internal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_isr_data
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_exception_handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_exception_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_kernel_isr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[aa]"></a>_task_ready</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _task_ready &rArr; _task_ready_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>

<P><STRONG><a name="[77]"></a>_task_get_td</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_priority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_for
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_for
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_index_from_id
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_ptr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[ab]"></a>_task_destroy_internal</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_run_internal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_destroy_stack_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
</UL>

<P><STRONG><a name="[ae]"></a>_task_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_exit_function_internal
</UL>

<P><STRONG><a name="[11]"></a>_task_exit_function_internal</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stack_bu.o(.text)
<LI> task.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>_task_abort_internal</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _task_abort_internal &rArr; _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PSP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_exit_function_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort
</UL>

<P><STRONG><a name="[5c]"></a>_task_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _task_abort &rArr; _task_abort_internal &rArr; _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[9a]"></a>_task_fill_stack_internal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[b1]"></a>_task_alloc_td_internal</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[9f]"></a>_task_init_internal</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
</UL>

<P><STRONG><a name="[b2]"></a>_task_build_internal</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
</UL>

<P><STRONG><a name="[b3]"></a>_task_create_internal</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create
</UL>

<P><STRONG><a name="[b4]"></a>_task_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
</UL>

<P><STRONG><a name="[b5]"></a>_task_create_at</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>

<P><STRONG><a name="[b6]"></a>_task_get_id_from_name</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[b8]"></a>_task_get_template_ptr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[b9]"></a>_task_get_template_index</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[124]"></a>_task_get_id_from_td</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_task_get_index_from_id</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[bb]"></a>_task_get_parameter_internal</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_get_stack_start
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_for
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter
</UL>

<P><STRONG><a name="[bd]"></a>_task_get_parameter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_internal
</UL>

<P><STRONG><a name="[be]"></a>_task_get_parameter_for</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_internal
</UL>

<P><STRONG><a name="[bf]"></a>_task_set_parameter_internal</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_get_stack_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_for
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter
</UL>

<P><STRONG><a name="[c0]"></a>_task_set_parameter</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_internal
</UL>

<P><STRONG><a name="[c1]"></a>_task_set_parameter_for</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_internal
</UL>

<P><STRONG><a name="[c2]"></a>_task_get_priority</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[c3]"></a>_task_set_priority</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_insert_priorityq_internal
</UL>

<P><STRONG><a name="[c6]"></a>_task_restart</STRONG> (Thumb, 30 bytes, Stack size 112 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[c7]"></a>_task_stop_preemption</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[c8]"></a>_task_start_preemption</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>

<P><STRONG><a name="[125]"></a>_task_check_stack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_task_get_creator</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>_task_get_error</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>_task_get_error_ptr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>_task_get_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>_task_exiting_function_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_task_sync_priority_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
</UL>

<P><STRONG><a name="[4f]"></a>_task_set_error_td_internal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
</UL>

<P><STRONG><a name="[84]"></a>_time_delay_internal</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, time_ticks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _time_delay_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
</UL>

<P><STRONG><a name="[c9]"></a>_time_delay_for</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[95]"></a>_time_delay_ticks</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, time_ticks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _time_delay_ticks &rArr; _time_delay_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_task
</UL>

<P><STRONG><a name="[ca]"></a>_time_delay_until</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[cb]"></a>_time_diff_ticks</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks
</UL>

<P><STRONG><a name="[cd]"></a>_time_diff_ticks_int32</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks_int32
</UL>

<P><STRONG><a name="[cf]"></a>_time_dequeue</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[d0]"></a>_time_dequeue_td</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[d1]"></a>_time_get_elapsed_ticks</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>

<P><STRONG><a name="[d2]"></a>_time_get_elapsed_ticks_fast</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>

<P><STRONG><a name="[12b]"></a>_time_get_hwticks</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_time_get_ticks</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>

<P><STRONG><a name="[12c]"></a>_time_get_hwticks_per_tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>_time_init_ticks</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_time_notify_kernel</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, time_ticks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _time_notify_kernel &rArr; _psp_normalize_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_OnCounterRestart
</UL>

<P><STRONG><a name="[d4]"></a>_time_set_ticks</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks
</UL>

<P><STRONG><a name="[12e]"></a>_time_set_timer_vector</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_time_set_hwtick_function</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, time_ticks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_init
</UL>

<P><STRONG><a name="[41]"></a>_time_set_hwticks_per_tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_init
</UL>

<P><STRONG><a name="[12f]"></a>_time_get_ticks_per_sec</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>SegLCD_Init</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, seg_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_LCD
</UL>

<P><STRONG><a name="[d5]"></a>SegLCD_DisplayError</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, seg_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = SegLCD_DisplayError &rArr;  SegLCD_Set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayDecimal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayTime
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_Set
</UL>

<P><STRONG><a name="[d6]"></a>SegLCD_Set</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, seg_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SegLCD_Set &rArr; SegLCD_DisplayError &rArr;  SegLCD_Set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayDecimal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayTime
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayHex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayError
</UL>

<P><STRONG><a name="[92]"></a>SegLCD_DisplayDecimal</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, seg_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SegLCD_DisplayDecimal &rArr; SegLCD_Set &rArr; SegLCD_DisplayError &rArr;  SegLCD_Set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_Set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayError
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_LCD
</UL>

<P><STRONG><a name="[d8]"></a>SegLCD_DisplayHex</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, seg_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_Set
</UL>

<P><STRONG><a name="[d9]"></a>SegLCD_DisplayTime</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, seg_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_Set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayError
</UL>

<P><STRONG><a name="[93]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_task
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_LCD
</UL>

<P><STRONG><a name="[22]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[df]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b7]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_index
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayDecimal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegLCD_DisplayTime
</UL>

<P><STRONG><a name="[de]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[dd]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[27]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[132]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_sched_start_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
</UL>

<P><STRONG><a name="[ad]"></a>_sched_run_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[7e]"></a>_sched_check_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_unboost_priority_internal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_boost_priority_internal
</UL>

<P><STRONG><a name="[82]"></a>_sched_execute_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
</UL>

<P><STRONG><a name="[e6]"></a>_mqx_api_call</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>

<P><STRONG><a name="[135]"></a>_task_block</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[c]"></a>_int_kernel_isr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 2]<UL><LI> int.o(.text)
<LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[5b]"></a>_psp_exception_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[136]"></a>_mem_test_and_set</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[b0]"></a>__get_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>

<P><STRONG><a name="[137]"></a>__get_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[59]"></a>__set_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
</UL>

<P><STRONG><a name="[138]"></a>__get_PSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[139]"></a>__enable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[13a]"></a>__disable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[13b]"></a>__get_LR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[13c]"></a>__get_PC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[13d]"></a>__get_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[8f]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem_zero.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
</UL>

<P><STRONG><a name="[e0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14]"></a>_int_kernel_isr_epilog</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 1]<UL><LI> dispatch.o(KERNEL)
</UL>
<P><STRONG><a name="[36]"></a>InterruptRx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, io1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO1_Main
</UL>

<P><STRONG><a name="[37]"></a>InterruptTx</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, io1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO1_Main
</UL>

<P><STRONG><a name="[c5]"></a>_task_restart_func</STRONG> (Thumb, 498 bytes, Stack size 64 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_run_internal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_get_stack_start
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart
</UL>

<P><STRONG><a name="[13]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[e4]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[db]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[dc]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
