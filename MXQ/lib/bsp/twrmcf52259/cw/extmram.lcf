
MEMORY
{
## intflash     (RX): ORIGIN = 0x00000000, LENGTH = 0x00080000
## mram         (RW): ORIGIN = 0x10000000, LENGTH = 0x00080000  # MRAM is not used for linking
## sram         (RW): ORIGIN = 0x20000000, LENGTH = 0x00010000


    vectorrom   (RX): ORIGIN = 0x10000000, LENGTH = 0x00000400
    cfmprotrom  (RX): ORIGIN = 0x10000400, LENGTH = 0x00000020
    rom         (RX): ORIGIN = 0x10000420, LENGTH = 0x0007FBE0  # Code + Const data
    flashx      (RW): ORIGIN = 0x00000420, LENGTH = 0x0007FBE0  # Internal flash

    ram         (RW): ORIGIN = 0x20000000, LENGTH = 0x0000fb00  # SRAM - RW data

    # kernel space starts after RAM variables (Location of MQX Kernel data + MQX heap)
    end_of_kd   (RW): ORIGIN = 0x2000FFF0, LENGTH = 0x00000000
   
   # Boot stack reused by MQX Kernel data
   bstack      (RW): ORIGIN = 0x2000FA00, LENGTH = 0x00000200  # Boot stack
   end_bstack  (RW): ORIGIN = 0x2000FBFF, LENGTH = 0x00000000
}

KEEP_SECTION { .vectors_rom, .vectors_ram, .cfmconfig }

SECTIONS
{
   ___INTERNAL_SRAM_BASE  = 0x20000000;
   ___INTERNAL_SRAM_SIZE  = 0x00010000;
   ___INTERNAL_FLASH_BASE = 0x00000000;
   ___INTERNAL_FLASH_SIZE = 0x00080000;
   ___EXTERNAL_MRAM_BASE  = 0x10000000;
   ___EXTERNAL_MRAM_SIZE  = 0x00080000;
   ___EXTERNAL_MRAM_ROM_BASE = 0x10000000;
   ___EXTERNAL_MRAM_ROM_SIZE = 0x00060000;
   ___EXTERNAL_MRAM_RAM_BASE = 0x10060000;
   ___EXTERNAL_MRAM_RAM_SIZE = 0x00020000;

   ___IPSBAR              = 0x40000000; # Peripherals/FlexCAN
   
   # MQX link time configurations
   ___DEFAULT_PROCESSOR_NUMBER = 1;
   ___DEFAULT_INTERRUPT_STACK_SIZE = 1500;
   ___KERNEL_DATA_VERIFY_ENABLE = 0;    # Test SDRAM read/write
   
   # Flashx configurations
   ___FLASHX_SECT_SIZE = 0x1000;

    .vectors :
    {
        ___VECTOR_TABLE_ROM_START = .;      # Runtime vector table in sram

        *(.vectors_rom)
        . = ALIGN (0x4); 
    } > vectorrom

    .cfmprotect :
    {
        *(.cfmconfig)
        . = ALIGN(0x4);
    } > cfmprotrom
        
    .main_application :
    {
        *(KERNEL)
        *(S_BOOT)
        *(IPSUM)
        *(.text)
        *(.init)
        *(.fini)
        *(.eini)
        *(.ctors)
        *(.dtors)
        .= ALIGN(0x4);
        *(.rodata)
        .= ALIGN(0x4);
        *(.rdata)
    } > rom

    .main_application_data :
    {
        . = ALIGN (0x10000);
        ___VECTOR_TABLE_RAM_START = .;      # Runtime vector table in sram
        *(.vectors_ram)
        
        . = ALIGN(512);
        __BDT_BASE = .;
        *(.usb_bdt)
        __BDT_END = .; 
    
        . = ALIGN(0x4);
        *(.exception)
        . = ALIGN(0x4);
        __exception_table_start__ = .;
        EXCEPTION
        __exception_table_end__ = .;

        ___sinit__ = .;
        STATICINIT

        __START_DATA = .;
        *(.data)
        __END_DATA = .;

        __START_SDATA = .;
        *(.sdata)
        __END_SDATA = .;

        __SDA_BASE  = .;
        __SDA_BASE_ = __SDA_BASE;

        __START_SBSS = .;
        *(.sbss)
        *(SCOMMON)
        __END_SBSS = .;

        __START_BSS = .;
        *(.bss)
        *(COMMON)
        __END_BSS = .;
      
   } > ram

   .kernel_data :
   {
      ___KERNEL_DATA_START = ALIGN(0x10);
   }
   .end_of_kernel_data :
   {
      ___KERNEL_DATA_END = .;
   } > end_of_kd

   .boot_stack :
   {
      _stack_end = .;
   } > bstack
   .end_of_boot_stack :
   {
      _stack_addr  = .;
      __SP_INIT    = .;
      ___BOOT_STACK_ADDRESS = .;
   } > end_bstack

   __S_romp = 0x0;              # no ROM in this example
   

    _flashx_start = ___INTERNAL_FLASH_BASE;

    # flashx working area starts from the 2nd sector of the flash (because in the first sector there is CFMPROTECT area)
    ___FLASHX_START_ADDR = (_flashx_start + 0x1000) / 0x1000 * 0x1000;
    ___FLASHX_END_ADDR = ___INTERNAL_FLASH_BASE + ___INTERNAL_FLASH_SIZE;
}

# EOF
